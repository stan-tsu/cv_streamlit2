import streamlit as st
from ultralytics import YOLO
from PIL import Image, ImageDraw
import requests
from io import BytesIO
import os

st.set_page_config(page_title="–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞", layout="wide")

st.title("üßë‚Äçüíª –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π (YOLO)")

@st.cache_resource
def load_model():
    return YOLO("faces.pt")

model = load_model()

st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü")
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", 
    type=["jpg", "jpeg", "png"], 
    accept_multiple_files=True
)

st.subheader("–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
img_url = st.text_input("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

images = []
if uploaded_files:
    for file in uploaded_files:
        img = Image.open(file)
        images.append((img, file.name))
elif img_url:
    try:
        response = requests.get(img_url)
        img = Image.open(BytesIO(response.content))
        images.append((img, "from_url.jpg"))
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

def mask_faces(img, results):
    img_masked = img.copy()
    draw = ImageDraw.Draw(img_masked)
    for box in results[0].boxes.xyxy.cpu().numpy():
        x1, y1, x2, y2 = map(int, box)
        draw.rectangle([x1, y1, x2, y2], fill="gray")
    return img_masked


if images:
    st.header("2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏")
    cols = st.columns(len(images))
    for idx, (img, name) in enumerate(images):
        with cols[idx]:
            st.image(img, caption=f"–ò—Å—Ö–æ–¥–Ω–æ–µ: {name}", use_container_width=True)
            results = model.predict(img)
            res_img = results[0].plot()
            st.image(res_img, caption="–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü", use_container_width=True)
            masked_img = mask_faces(img, results)
            st.image(masked_img, caption="–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—Ü", use_container_width=True)

    # --- –ú–µ—Ç—Ä–∏–∫–∏ ---
    st.header("3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö")
    metrics_img_path = "faces_graphs.png"
    if os.path.exists(metrics_img_path):
        st.image(metrics_img_path, caption="–ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", use_container_width=True)
    else:
        st.info("–§–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –º–µ—Ç—Ä–∏–∫ (faces_graphs.png) –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º.")


st.markdown("""
---
**–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:**  
YOLO –¥–æ–æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ –ª–∏—Ü –¥–ª—è –∑–∞–¥–∞—á–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏.  
–ü–æ—Å–ª–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è (–∑–∞–º–∞–∑—ã–≤–∞—é—Ç—Å—è) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
""")